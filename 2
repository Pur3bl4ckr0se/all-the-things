// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to calculate total
// number of valid permutations
int validPermutations(string str)
{
	unordered_map<char, int> m;

	// Creating count which is equal to the
	// Total number of characters present and
	// ans that will store the number of unique
	// permutations
	int count = str.length(), ans = 0;

	// Storing frequency of each character
	// present in the string
	for (int i = 0; i < str.length(); i++) {
		m[str[i]]++;
	}
	for (int i = 0; i < str.length(); i++) {
		// Adding count of characters by excluding
		// characters equal to current char
		ans += count - m[str[i]];

		// Reduce the frequency of the current character
		// and count by 1, so that it cannot interfere
		// with the calculations of the same elements
		// present to the right of it.
		m[str[i]]--;
		count--;
	}

	// Return ans+1 (Because the given string
	// is also a unique permutation)
	return ans + 1;
}

// Driver Code
int main()
{
	string str = "sstt";
	cout << validPermutations(str);
	return 0;
}
